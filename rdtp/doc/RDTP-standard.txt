Rednet Data Transfer Protocol alpha r3

RDTP
send(target, code, format, data, label, srcid):
  msg = { code = "code", format = "format", data = "data", label = "label", srcid = srcid }
  rednet.send(target, textutils.serialize(msg))

code = 00 -> ff as hex string
format = datatype of 'data', can be text, number, array, picture (if client can process it), etc. as a string
data = the main payload of the message as a string; should be a human readable version of code if there is no other body
label = the name of the original sender of the message as a string
srcid = the id of the original sender as a number

Rednet Data Transfer Protocol [secure] alpha r3

RDTPs
----------------------------------------------------
--                    WARNING!                    --
-- RDTPs DOES NOT AUTOMATICALLY SECURE YOUR DATA! --
--   It is intended as a standarized means for    --
-- for sending encrypted information over rednet. --
--        YOU MUST ENCRYPT YOUR INFO FIRST!       --
----------------------------------------------------
send_enc(target, code, format, data, label, srcid, encalgorithm, pubkey, hash, hashtype):
  msg = { code = "code", format = "format", data = "data", label = "label", srcid = srcid, encalgorithm = "encalgorithm", pubkey = "pubkey", hash = "hash", hashtype = "hashtype" }
  rednet.send(target, textutils.serialize(msg))

code = 00 -> ff as hex string
format = datatype of 'data', can be text, number, array, picture (if client can process it), etc. as a string
data = the main payload of the message as a string; should be a human readable version of code if there is no other body
label = the name of the original sender of the message as a string
srcid = the id of the original sender as a number
encalgorithm = the encryption algorithm used
pubkey = the key to use for encrypting the data to send, private keys should never be sent
hash = the hash of the encrypted message, used to verify the integrity of the data
hashtype = the method used to obtain the hash

EXPECTED BEHAVIORS:

Server should check if the incoming message is RDTP or RDTPS, and whether it supports the specified protocol
If the server only supports RDTPS, it should still be capable of replying using RDTP in case the client does not support RDTPS
Clients should not attempt to send data over protocols they do not support
RDTPS should only use asymmetric encryption
Servers MUST provide a hash of the UNENCRYPTED 'data' field with any message sent via RDTPS. clients do not need to validate messages. the reverse is also true.



POSSIBLE CODES:
00 - GET: asks for a resource
01 - RESPWAIT: replies to a GET without the resource, because the server is still obtaining it
02 - RESPOK: replies to a GET with the resource
03 - RESPFAIL1: replies to a GET without the resource, because it could not be found
04 - RESPFAIL2: replies to a GET without the resource, because the client is not allowed to access it
05 - RESPFAIL3: replies to a GET without the resource, because the request was impossible to serve
06 - RESPFAIL4: replies to a GET without the resource, but gives no reason
07 - RESPFAIL5: replies to a GET without the resource, and supplies a custom reason
08 - RESPBADREQ: replies to a MSG, indicating that the message format was not recognized
09 - NORESP: the server failed to respond
0a - RESPNODATA: replies to a GET without the resource, because the server is a test server. This is not an error.
0b - 
0c - 
0d - 
0e - 
0f - 
10 - BADRESP: response did not have a valid format
11 - 
12 - 
13 - 
14 - 
15 - 
16 - 
17 - 
18 - 
19 - 
1a - 
1b - 
1c - 
1d - 
1e - 
1f - 
20 - TIMEOUT: no response received
21 - 
22 - 
23 - 
24 - 
25 - 
26 - 
27 - 
28 - 
29 - 
2a - 
2b - 
2c - 
2d - 
2e - 
2f - 
